
#include "Vehicle.h"
#include "Car.h"
#include "Motorcycle.h"
#include "map.h"
#include <iostream>
#include <memory>
#include <vector>
#include <limits>

void displayMenu() {
    std::cout << "\nMain Menu:\n";
    std::cout << "1. Create and customize a car\n";
    std::cout << "2. Create and customize a motorcycle\n";
    std::cout << "3. Select a map\n";
    std::cout << "4. View all vehicles\n";
    std::cout << "5. Exit\n";
    std::cout << "Enter your choice: ";
}

int main() {
    std::vector<std::unique_ptr<Vehicle>> vehicles; // Polymorphic container for vehicles
    Maps maps;                                      // Map manager
    bool running = true;

    while (running) {
        displayMenu();
        int choice;
        if (!(std::cin >> choice)) {
            std::cin.clear(); // Clear error flag
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
            std::cout << "Invalid input. Please enter a number.\n";
            continue;
        }

        switch (choice) {
            case 1: {
                std::unique_ptr<Vehicle> car = std::make_unique<Car>();
                car->customize();
                vehicles.push_back(std::move(car));
                break;
            }
            case 2: {
                std::unique_ptr<Vehicle> motorcycle = std::make_unique<Motorcycle>();
                motorcycle->customize();
                vehicles.push_back(std::move(motorcycle));
                break;
            }
            case 3: {
                std::cout << "\n--- Select a Map ---\n";
                maps.chooseMap();
                break;
            }
            case 4: {
                std::cout << "\n--- All Vehicles ---\n";
                for (const auto& vehicle : vehicles) {
                    vehicle->display(); // Polymorphic call
                    std::cout << "------------------\n";
                }
                break;
            }
            case 5:
                std::cout << "Exiting the program. Goodbye!\n";
                running = false;
                break;
            default:
                std::cout << "Invalid choice! Please try again.\n";
        }
    }

    return 0;
}
