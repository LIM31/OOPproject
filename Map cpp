#include "map.h"
#include <iostream>

// ---------------------- Weather Implementation ----------------------

const Weather Weather::SUNNY(1, "Sunny");
const Weather Weather::RAINY(2, "Rainy");
const Weather Weather::SNOWY(3, "Snowy");

std::string Weather::toString() const {
    return name;
}

// ---------------------- TimeOfDay Implementation ----------------------

const TimeOfDay TimeOfDay::DAY(1, "Day");
const TimeOfDay TimeOfDay::NIGHT(2, "Night");

std::string TimeOfDay::toString() const {
    return name;
}

// ---------------------- Map Implementation ----------------------

Map::~Map() {
    delete name; // Clean up dynamically allocated memory
}

Map::Map(const Map& other)
    : name(new std::string(*other.name)), weather(other.weather), time_of_day(other.time_of_day) {}

Map& Map::operator=(const Map& other) {
    if (this != &other) {
        delete name; // Clean up existing resource
        name = new std::string(*other.name);
        weather = other.weather;
        time_of_day = other.time_of_day;
    }
    return *this;
}

std::string Map::getDetails() const {
    return *name + " (" + weather.toString() + ", " + time_of_day.toString() + ")";
}

// ---------------------- Maps Implementation ----------------------

Maps::Maps() {
    map_list.push_back(new Map("Sunny Meadow", Weather::SUNNY, TimeOfDay::DAY));
    map_list.push_back(new Map("Rainy Forest", Weather::RAINY, TimeOfDay::NIGHT));
    map_list.push_back(new Map("Snowy Mountain", Weather::SNOWY, TimeOfDay::DAY));
}

Maps::~Maps() {
    for (MapBase* map : map_list) {
        delete map; // Clean up dynamically allocated memory
    }
}

Maps::Maps(const Maps& other) {
    for (const MapBase* map : other.map_list) {
        map_list.push_back(new Map(dynamic_cast<const Map&>(*map))); // Deep copy
    }
}

Maps& Maps::operator=(const Maps& other) {
    if (this != &other) {
        for (MapBase* map : map_list) {
            delete map; // Clean up existing resources
        }
        map_list.clear();
        for (const MapBase* map : other.map_list) {
            map_list.push_back(new Map(dynamic_cast<const Map&>(*map))); // Deep copy
        }
    }
    return *this;
}

void Maps::chooseMap() const {
    std::cout << "Available Maps:\n";
    for (size_t i = 0; i < map_list.size(); ++i) {
        std::cout << i + 1 << ". " << map_list[i]->getName() << "\n";
    }

    std::cout << "Enter the number of your choice: ";
    int choice;
    std::cin >> choice;

    handleMapChoice(choice);
}

void Maps::handleMapChoice(int choice) const {
    if (choice < 1 || choice > static_cast<int>(map_list.size())) {
        std::cout << "Invalid choice. Please try again.\n";
    } else {
        std::cout << "You have chosen: " << map_list[choice - 1]->getDetails() << "\n";
    }
}
