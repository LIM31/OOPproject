
#include "map.h"
#include <iostream>

// ---------------------- Weather Implementation ----------------------

const Weather Weather::SUNNY(1, "Sunny");
const Weather Weather::RAINY(2, "Rainy");
const Weather Weather::SNOWY(3, "Snowy");

std::string Weather::toString() const {
    return name;
}

// ---------------------- TimeOfDay Implementation ----------------------

const TimeOfDay TimeOfDay::DAY(1, "Day");
const TimeOfDay TimeOfDay::NIGHT(2, "Night");

std::string TimeOfDay::toString() const {
    return name;
}

// ---------------------- Map Implementation ----------------------

Map::Map(const std::string& name, const Weather& weather, const TimeOfDay& time_of_day)
    : name(name), weather(weather), time_of_day(time_of_day) {}

std::string Map::getDetails() const {
    return name + " (" + weather.toString() + ", " + time_of_day.toString() + ")";
}

std::string Map::getName() const {
    return name;
}

// ---------------------- Maps Implementation ----------------------

Maps::Maps() {
    map_list.push_back(std::make_unique<Map>("Sunny Meadow", Weather::SUNNY, TimeOfDay::DAY));
    map_list.push_back(std::make_unique<Map>("Rainy Forest", Weather::RAINY, TimeOfDay::NIGHT));
    map_list.push_back(std::make_unique<Map>("Snowy Mountain", Weather::SNOWY, TimeOfDay::DAY));
}

Maps::~Maps() = default; // Unique_ptr takes care of cleanup

void Maps::chooseMap() const {
    std::cout << "Available Maps:\n";
    for (size_t i = 0; i < map_list.size(); ++i) {
        std::cout << i + 1 << ". " << map_list[i]->getName() << "\n";
    }

    std::cout << "Enter the number of your choice: ";
    int choice;
    if (!(std::cin >> choice)) {
        std::cin.clear(); // Clear error flag
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard invalid input
        std::cout << "Invalid input. Please enter a number.\n";
        return;
    }

    handleMapChoice(choice);
}

void Maps::handleMapChoice(int choice) const {
    if (choice < 1 || choice > static_cast<int>(map_list.size())) {
        std::cout << "Invalid choice. Please try again.\n";
    } else {
        std::cout << "You have chosen: " << map_list[choice - 1]->getDetails() << "\n";
    }
}
